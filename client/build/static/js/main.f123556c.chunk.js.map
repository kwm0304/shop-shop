{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/Success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CHECKOUT","QUERY_CATEGORIES","QUERY_USER","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","i","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","res","redirectToCheckout","sessionId","checkout","session","getCart","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f123556c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","/* A reducer is a function that updates state by returning a new state object and never alters the original state object.*/\r\n/*The newstate object will be the result of the reducer function, which accepts the following 2 parameters: type and value. Type-this is the type of action we're performing\r\nand should be one of the predefined actions we created earlier. Value -a name representative of the new data we want to use with the action.*/\r\n/*useReducer() hook is meant to manage a greater level of state than useState()*/\r\nimport {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\"\r\nimport { useReducer } from 'react'\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        //if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n        case UPDATE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: [...action.categories]\r\n            };\r\n        case UPDATE_CURRENT_CATEGORY:\r\n            return {\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n        case ADD_TO_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: [...state.cart, action.product]\r\n            };\r\n        case ADD_MULTIPLE_TO_CART:\r\n            return {\r\n                ...state,\r\n                cart: [...state.cart, ...action.products]\r\n            };\r\n            //.filter only keeps the items that dont match the provided _id property\r\n        case REMOVE_FROM_CART:\r\n            let newState = state.cart.filter(product => {\r\n                return product._id !== action._id;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                cartOpen: newState.length > 0,\r\n                cart: newState\r\n            };\r\n        case UPDATE_CART_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: state.cart.map(product => {\r\n                    if (action._id === product._id) {\r\n                        product.purchaseQuantity = action.purchaseQuantity;\r\n                    }\r\n                    return product\r\n                })\r\n            };\r\n        case CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n        case TOGGLE_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            };\r\n            //if it's none of these actions, do not update state and keep things the same\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nexport function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState)\r\n}","//used by the ProductList component\r\n;//We want to be able to select a category from the previous two actions we created  at update categories\r\n//and display products for that category from the update prodcuts action\r\n/* The end goal for update_products is to store the data retreived for products by Apollo in this global state*/\r\n/*Update_current_category is the connector btwn the other 2. We will select a category from the state created by update_categories anddisplay products for that\r\ncategory from the list we create from the update_products action */\r\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\n\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\n","/* useContext will be used to instantiate a new Context object. We're using this to create the container to hold our global state data and \nfunctionality so we can provide it throughout our app. useContext is another hook that will let us use the state created from the createContext function*/\nimport React, {createContext, useContext} from 'react';\nimport { useProductReducer } from './reducers';\n/* Every Context object created from createContext() comes with 2 components (Provider and Consumer)\\\nProvider is a type of react component that we wrap our app in so it can make state data that's passed into it as a prop, available to all other components\nConsumer is our means of grabbing and using the data that Provider holds for us*/\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n/*instantiate our global state with useProductReducer() we created earlier. B/c it wraps around the useReducer() hook, we receive the following \n2 items as a return. 1 State - is the most up to date version of our global state object 2 Dispatch - is the method we execute to update our state\nIt is specifically going to look for an action object passed in as it's argument.*/\nconst StoreProvider = ({ value = [], ...props}) => {\n    /*After useProductReducer() completes and provides us w/ new state and function to update state, -> return the StoreContext's Provider component\n    w/ our state object and dispatch the function provided as data for the value prop.\n    Long story short we are turning StoreProvider into a custom <Provider> component */\n    const [state, dispatch] = useProductReducer({\n        products: [],\n        cart: [],\n        cartOpen: false,\n        categories: [],\n        currentCategory: '',\n    });\n    //use this to confirm it works\n    \n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    //open connection to the db 'shop-shop' w/ the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    //create variables to hold reference to the db, transaction (tx) and object store\n    let db, tx, store;\n\n    //if version has changed(or if this is the first time using the db), run this method and create the 3 object stores\n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      //create object store for each type of data and set 'primary' key index to be the _id of the data\n      db.createObjectStore('products', { keyPath: '_id'});\n      db.createObjectStore('categories', { keyPath: '_id'});\n      db.createObjectStore('cart', { keyPath: '_id'});\n    };\n\n    //handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error')\n    };\n\n    //on db open success\n    request.onsuccess = function(e) {\n      //save a reference of the db to the 'db' variable\n      db = request.result;\n      //open a transaction do whatever we pass into 'storeName' (must match one of the object store names)\n      tx = db.transaction(storeName, 'readwrite');\n      //save a reference to that object store\n      store = tx.objectStore(storeName);\n\n      //if there's any errors, let us know\n      db.onerror = function(e) {\n        console.log('error', e);\n      };\n    \n      //checks which value we passed into the function as a method and perform that method on the object store\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result)\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }\n    //when the transaction is complete, close the connection\n  tx.oncomplete = function() {\n    db.close();\n  };\n  };\n  })\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\"\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction ProductItem(item) {\n  const [state, dispatch] = useStoreContext();\n\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n\nconst { cart } = state;\n\nconst addToCart = () => {\n  //find the cart item with the matching id\n  const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n\n  //if there was a match, call UPDATE with a new purchase quantity\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: _id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n    idbPromise('cart', 'put', {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    })\n  } else {\n  dispatch({\n    type: ADD_TO_CART,\n    product: { ...item, purchaseQuantity: 1 }\n  });\n  idbPromise('cart', 'put', { ...item, purchaseQuantity: 1})\n}};\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={addToCart}>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;\n","import { gql } from '@apollo/client';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n  {\n    categories {\n      _id\n      name\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  {\n    user {\n      firstName\n      lastName\n      orders {\n        _id\n        purchaseDate\n        products {\n          _id\n          name\n          description\n          price\n          quantity\n          image\n        }\n      }\n    }\n  }\n`;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { UPDATE_PRODUCTS } from '../../utils/actions'\nimport ProductItem from '../ProductItem';\nimport { QUERY_PRODUCTS } from '../../utils/queries';\nimport spinner from '../../assets/spinner.gif';\nimport { idbPromise } from '../../utils/helpers';\n\n//Displays products from an Apollo query\nfunction ProductList() {\n \n  const [state, dispatch] = useStoreContext();\n\n  const { currentCategory } = state;\n  \n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  \n  useEffect(() => {\n    //if there's data to be stored\n    if (data) {\n      //we will store it in our global state object\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products,\n      });\n\n      //but let's also take each product and save it to IndexedDB using the helper function\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product)\n      });\n      //add else if to check if 'loading' is undefined in useQuery() hook\n    } else if (!loading) {\n      //since we're offline, get all of the data from the 'products' store\n      idbPromise('products', 'get').then((products) => {\n        //use retrieved data to set global state for offline browsing\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: products,\n        })\n      })\n    }\n  }, [data, loading, dispatch]);\n  \n  function filterProducts() {\n    if (!currentCategory) {\n      return state.products;\n    }\n  \n    return state.products.filter((product) => product.category._id === currentCategory);\n  }\n  return (\n    <div className=\"my-2\">\n      <h2>Our Products:</h2>\n      {state.products.length ? (\n        <div className=\"flex-row\">\n          {filterProducts().map((product) => (\n            <ProductItem\n              key={product._id}\n              _id={product._id}\n              image={product.image}\n              name={product.name}\n              price={product.price}\n              quantity={product.quantity}\n            />\n          ))}\n        </div>\n      ) : (\n        <h3>You haven't added any products yet!</h3>\n      )}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n    </div>\n  );\n}\n\nexport default ProductList;\n","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_CATEGORIES } from '../../utils/queries';\nimport { useStoreContext } from \"../../utils/GlobalState\"\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\n\n//Keeps track of our category list from an Apollo query\n/* When we use this component, we immediately call on useStoreContext() to retrieve the current state from the global state object and the dispatch\nmethod to update state. B/c we only need the categories array, we destructure it out*/\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n  \n  \n\n  useEffect(() => {\n    //if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      //execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to dispatch\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories,\n      });\n      categoryData.categories.forEach((category) => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then((categories) => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories,\n        })\n      })\n    }\n  },[categoryData, loading, dispatch]);\n\n  const handleClick = (id) => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id,\n    })\n  }\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map((item) => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n","import React from 'react';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nconst CartItem = ({ item }) => {\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = item => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id\r\n    });\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    if(value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n\r\n      idbPromise('cart', 'delete', { ...item })\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) })\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img\r\n          src={`/images/${item.image}`}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <div>{item.name}, ${item.price}</div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"1\"\r\n            value={item.purchaseQuantity}\r\n            onChange={onChange}\r\n          />\r\n          <span\r\n            role=\"img\"\r\n            aria-label=\"trash\"\r\n            onClick={() => removeFromCart(item)}\r\n          >\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CartItem;","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from 'react';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/client';\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { idbPromise } from '../../utils/helpers';\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\nimport './style.css';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const [state, dispatch] = useStoreContext();\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    }\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach((item) => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n\n    getCheckout({\n      variables: { products: productIds },\n    });\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span role=\"img\" aria-label=\"trash\">\n          🛒\n        </span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>\n        [close]\n      </div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map((item) => (\n            <CartItem key={item._id} item={item} />\n          ))}\n\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n\n            {Auth.loggedIn() ? (\n              <button onClick={submitCheckout}>Checkout</button>\n            ) : (\n              <span>(log in to check out)</span>\n            )}\n          </div>\n        </div>\n      ) : (\n        <h3>\n          <span role=\"img\" aria-label=\"shocked\">\n            😱\n          </span>\n          You haven't added anything to your cart yet!\n        </h3>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart'\n//This component keeps track of the currentCategory we are viewing\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\nexport default Home;\n","import React, { useEffect, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useQuery } from '@apollo/client';\nimport { useStoreContext } from \"../utils/GlobalState\";\nimport {\n  UPDATE_PRODUCTS,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART\n} from \"../utils/actions\";\nimport { QUERY_PRODUCTS } from '../utils/queries';\nimport spinner from '../assets/spinner.gif';\nimport Cart from '../components/Cart';\nimport { idbPromise } from '../utils/helpers';\n\nfunction Detail() {\n  const [state, dispatch] = useStoreContext();\n  const { id } =useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({});\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n  const { products, cart } = state;\n\n  \n/* useEffect() checks if there's data in our global state's product array. If there is we use it to figure out which product is the current one \nwe want to display by matching the _id value we grabbed from useParams(). If there is no data, it's still set up to use the data we returned from\nuseQuery() to set product data to the global state object*/\n  useEffect(() => {\n    //already in the global store\n    if (products.length) {\n      setCurrentProduct(products.find((product) => product._id === id));\n    }\n    //retrieved from server\n     else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n\n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product)\n      });\n    }\n    //get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts,\n        })\n      })\n    }\n  }, [products, data, loading, dispatch, id])\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\n\n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      //if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      })\n    } else {\n    dispatch({\n      type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n    });\n    //if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n    idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1});\n  }};\n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n\n    //upon removal from cart, delete the item from IndexedDB using the 'currentProduct._id' to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  return (\n    <>\n      {currentProduct && cart ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">← Back to Products</Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>{currentProduct.description}</p>\n\n          <p>\n            <strong>Price:</strong>${currentProduct.price}{' '}\n            <button onClick={addToCart}>Add to Cart</button>\n            <button\n            disabled={!cart.find((p) => p._id === currentProduct._id)} \n            onClick={removeFromCart}\n            >\n            Remove from Cart\n            </button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\n      <Cart />\n    </>\n  );\n}\n\nexport default Detail;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success () {\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n    useEffect(() => {\r\n        async function saveOrder() {\r\n            const cart = await idbPromise('cart', 'get');\r\n            const products = cart.map((item) => item._id);\r\n\r\n            if (products.length) {\r\n                const { data } = await addOrder({ variables: { products } });\r\n                const productData = data.addOrder.products;\r\n\r\n                productData.forEach((item) => {\r\n                    idbPromise('cart', 'delete', item);\r\n                });\r\n            }\r\n\r\n            setTimeout(() => {\r\n                window.location.assign('/');\r\n            }, 3000)\r\n        }\r\n        \r\n        saveOrder();\r\n    }, [addOrder]);\r\n\r\n    return (\r\n        <div>\r\n            <Jumbotron>\r\n                <h1>Succuess</h1>\r\n                <h2>\r\n                    Thank you for your purchase!\r\n                </h2>\r\n                <h2>\r\n                    You will now be redirected to the homepage\r\n                </h2>\r\n            </Jumbotron>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Success;","import React from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { StoreProvider } from \"./utils/GlobalState\";\n\nimport Home from './pages/Home';\nimport Detail from './pages/Detail';\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport Nav from './components/Nav';\nimport OrderHistory from './pages/OrderHistory';\nimport Success from './pages/Success';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n          <Nav />\n          <Routes>\n            <Route \n            path=\"/\" \n            element={<Home />}\n            />\n            <Route \n            path=\"/login\" \n            element={<Login />}\n            />\n            <Route \n            path=\"/signup\"\n            element={<Signup />}\n            />\n            <Route \n            path=\"/orderHistory\"\n            element={<OrderHistory />}\n            />\n            <Route \n            path=\"/products/:id\"\n            element={<Detail />}\n            />\n            <Route \n            path=\"*\"\n            element={<NoMatch />}\n            />\n            <Route\n            path=\"/success\"\n            element={<Success />}\n            />\n          </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}